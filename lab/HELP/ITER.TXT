@t я error
@s 14 0 0 __current__
@45 {МЕРА ПОГРЕШНОСТИ}
@n
@n
@n
@5 Условием окончания итерационного процесса является выполнение одного@n
из двух условий (выбор условия определяется соответствующим пунктом меню) :@n
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ x{n}@ - @x{n-1} ||@ <@ {e}@N
или@n
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ F(x{n})@ ||@ <@ {e}@N
@n
@s -1 0 0 symbol
@s 14 0 0 __current__
@5 Значение {e} мы будем называть {мерой погрешности}. Следует заметить,@n
 что выполнение условия сходимости не гарантирует, вообще говоря, что@n
@s -1 0 -3 small
 последнее приближение x{n} находится достаточно близко от корня.@n

@t я convergence in x
@s 14 0 0 __current__
@45 {СХОДИМОСТЬ ПО АРГУМЕНТУ}
@N
@N
@5 итерационный процесс считается сошедшимся, если выполнено условие:@n
@n
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ x{n}@ - @x{n-1} ||@ <@ {e},@N
@n
@s -1 0 0 symbol
@e -1 0 я error
где@2 {e}@ -@2 [мера@ погрешности]@n

@t я convergence in y
@s 14 0 0 __current__
@45 {СХОДИМОСТЬ ПО ФУНКЦИИ}
@N
@N
@5 итерационный процесс считается сошедшимся, если выполнено условие:@n
@n
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ F(x{n})@ ||@ <@ {e},@N
@n
@s -1 0 0 symbol
@e -1 0 я error
где@2 {e}@ -@2 [мера погрешности]@n

@t calculat
@s 14 0 0 __current__
@25 {Ваша функция может содержать:}@N
@N
@s 14 0 0 __current__
@2  - Числа, переменные, константу@3 {Pi} = 3.1415926 :@N
@N
@s 14 0 0 __current__
@2  - {алгебраические действия:}@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {+}@2 - плюс,@48 {-}@2 - минус,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {*}@2 - умножить,@39 {/}@2 - разделить,@N
@s 14 0 0 __current__
@8 {^}@2 - возведение в степень;@N
@N
@s 14 0 0 __current__
@2  - {математические функции:}@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {abs}@3 - модуль,@35 {acos}  - арккосинус,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {asin}@2 - арксинус,@32 {atan}  - арктангенс,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {cos}@3 - косинус,@35 {cosh}    - косинус гиперболический,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {exp}@3 - експонента,@29 {log}   - логарифм натуральный,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {lg10}@2 - логарифм десятичный,@8 {sin}   - синус,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {sinh}@2 - синус гиперболический,@8 {sqrt}  - корень квадратный,@N
@s 14 0 0 __current__
@s 14 0 0 __current__
@8 {tan}@4 - тангенс,@36 {tanh}  - тангенс гиперболический.@N
@N
@s 14 0 0 __current__
@25 {Например:}@N
@s -1 0 0 __current__
@3 {F(x,y) = -1.5e-4 / cos( Pi * x ) + abs( lg10 ( y + 1 ))}

@t index
@35 СПИСОК ТЕМ ПО АЛФАВИТУ :
@N
@e -1 0 calculat
     - [Ввод функций]@N
@e -1 0 task
     - [Задачник]@N
@e -1 0 я error
     - [Мера погрешности]@N
@e -1 0 Newton's
     - [метод Ньютона]@N
@e -1 0 simple iteration
     - [метод простой итерации]@N
@e -1 0 secant
     - [метод секущих]@N
@e -1 0 work
     - [работа с программой]@N
@e -1 0 я convergence in x
     - [сходимость по аргументу]@N
@e -1 0 я convergence in y
     - [сходимость по функции]@N
@e -1 0 ВВЕДЕНИЕ.
     - [учебник]@N


@t work
@n
@6  Программа использует следующие клавиши:@N
@n
@N
@s 14 0 0 __current__
@3 - {F1} -  вызывается данное окно помощь;@N

@s 14 0 0 __current__
@3 - {F2} -  контекстная помощь по пункту;@N

@s 14 0 0 __current__
@3 - {F3} -  вызов предыдущего окна помощи;@N

@s 14 0 0 __current__
@e -1 0 index
@3 - {F4} -  [список тем по алфавиту];@N

@s 14 0 0 __current__
@e -1 0 task
@3 - {F5} -  [учебный маршрут];@N

@s 14 0 0 __current__
@3 - {ESC} - выход из текущего окна,выход из редактора@N
@20 без сохранения;@N

@s 14 0 0 __current__
@3 - {пробел} - редактирование строки,где это возможно;@N

@s 14 0 0 __current__
@3 - {ENTER} - начало счета,вход в окно нижнего уровня;@N
@20 фиксация выбранного условия либо метода,@N
@20 поставить-убрать (*)-звездочку в пункте,@N
@20 выход из редактора с сохранением строки;@N

@s 14 0 0 __current__
@3 - {ALT X} - выход из программы.
@6 Для перемещения по окнам, редактируемой строке,для выхода из пошагового
режима счета используйте стрелочки и мышь.Использовать выделенные красным
цветом буквы возможно следующим образом:@N

@s 14 0 0 __current__
@5 {1)} загрузите знакогенератор русского алфавита,@N
@s 14 0 0 __current__
@5 {2)} переключитесь на русский алфавит,@N
@s 14 0 0 __current__
@5 {3)} если буква заглавная, то нажмите SHIFT.@N



@t ВВЕДЕНИЕ.
@s 14 0 0 __current__
@7 В этой работе Вы познакомитесь с {итерационными методами} решения
нелинейных уравнений.@N
@7 Предусматривается возможность на наиболее характерных примерах
рассмотреть и сравнить различные численные методы решения нелинейных
уравнений. Сравнение проводится по числу итераций и затратам времени
ЭВМ, а также визуально на экране дисплея.@N
@N
@N
@N
@s 14 0 0 __current__
@7 {НЕЛИНЕЙНЫЕ УРАВНЕНИЯ.@ ТЕОРЕТИЧЕСКАЯ СПРАВКА}
@N
@N
@s 14 0 0 __current__
@7 Нелинейные уравнения и системы уравнений решаются с применением {итерационных методов}.@N
@s 14 0 0 __current__
@7 {Итерационные методы} (их называют также методами последовательных
приближений) состоят в том, что решение x находится как предел
@s -1 0 -3 small
@s -1 0 -3 small
последовательных приближений x{(n)} (или x{n}) при числе итераций n, стремящемся
@s -1 0 0 symbol
к бесконечности. Обычно задаются некоторым числом {e}@ >@ 0 и вычисления
проводят до тех пор пока не будет выполнена, в определенной норме, оценка@N
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ x{n}@ - @X ||@ <@ {e}@N
@7 Ввиду того, что точное решение X неизвестно, это условие на практике
часто заменяют лишь необходимым, но легко проверяемым условием:@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 0 symbol
@40 ||@ x{n}@ - @x{n-1} ||@ <@ {e}@N
@N
Заметим, что, строго говоря, выполнение этого "условия сходимости" еще не
гарантирует, что итерационный процесс сходится.@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@7 Текущее@ значение@3 ||@ x{n}@ -@ x{n-1}@ ||@3 или@3 ||@ F(x{n})@ ||@3 на
@e -1 0 я error
экране дисплея называется термином ["погрешность"] . Такое название является
условным,
@s -1 0 -3 small
так как на самом деле погрешностью является величина ||@ X@ -@ x{n}@ || .@n
@N
@7 При решении нелинейных уравнений возникают две задачи: указание областей,
в которых лежит по одному решению (задача отделения корней) и задача отыскания
корней с заданной точностью (задача уточнения корней). Для отделения корней нет
общих приемов. Используются графики, участки монотонности функций, на которых она
меняет знак, и другие частные приемы.@N

Для решения нелинейного уравнения@N
@n
@40  F(x)@ =@ 0@5      a@ <@ x @ <@ b@N
@n
применяются следующие итерационные методы@N
@n
@e -1 0 simple iteration
@5   [простой итерации]@N
@n
@e -1 0 Newton's
@5   [Ньютона]@N
@n
@e -1 0 secant
@5   [секущих]@N
@7 Все перечисленные методы переносятся и на системы нелинейных алгебраических
уравнений, а также на уравнения в произвольных метрических простанствах.@N

@t simple iteration
@N
@s 14 0 0 __current__
@46 {Метод простой итерации}
@N
@N
@7 Пусть известно, что интересующий нас корень Х уравнения F(x)@ =@ 0
лежит в интервале a@ <@ x@ <@ b. Каким-нибудь способом приведем уравнение
F(x)@ =@ 0@ к равносильному ему на интервале U@ =@ @{@ a@ <@ x@ <@ b@ @}
@s -1 0 0 symbol
уравнению вида x@ =@ f(x). Можно положить f(x)@ =@ x@ -@ {a}@ *@ F(x),
@s -1 0 0 symbol
где {a}@ =@ const. Для отыскания решения Х, принадлежащего интервалу
@s -1 0 -3 small
@s -1 0 -3 small
a@ <@ x@ <@ b зададим x{0}, а затем вычисляем последующие x{k} по формуле@N
@s -1 0 -3 small
@s -1 0 -3 small
@40 x{p+1}@ =@ f(@ x{p}@ ),@5 p@ =@ 0,1,...@50 (1) @N
@N
@s 14 0 0 __current__
@7 {ТЕОРЕМА 1}@N
@7 Пусть итерационный процесс (1) сходится к значению Х. Тогда Х есть
корень уравнения F(x)@ =@ 0.@N
@N
@s 14 0 0 __current__
@7 {ТЕОРЕМА 2}@N
@N
@7 Пусть f(x) имеет производную во всех точках области U (т.е. интервала
@s -1 0 0 symbol
a@ <@ x@ <@ b) и пусть существует q, 0@ {г}@ q@ <@ 1,@ q@ =@ const, такое,
@s -1 0 6 small
@s -1 0 0 symbol
что ||f{x}||@ {г}@ q всюду в U. Тогда существует такая окрестность корня, что
@s -1 0 -3 small
при любом x{0} метод простых итераций сходится.@N
@7 Примечание: практический смысл теоремы заключается в том, что существует
такое достаточно мелкое разбиение U, что одна из точек обязательно попадет
в упомянутую окрестность. При выборе этой точки в качестве начального
приближения итерационный процесс с необходимостью сходится. Таким образом
поиск начального приближения, при котором итерационный процесс сходится,
@s -1 0 0 symbol
@s -1 0 6 small
@s -1 0 -3 small
можно передать машине. При этом для погрешности {e}{n}@ =@ X@ -@ x{n}@ на 
каждой итерации выполнена оценка@N
@N
@s -1 0 0 symbol
@s -1 0 6 small
@s -1 0 -3 small
@s -1 0 0 symbol
@s -1 0 6 small
@40 ||{e}{n}||@ <@ q{n}@ ||{e}{0}||,@2 n@ =@ 1,2,...,@n
@N

@t Newton's
@N
@s 14 0 0 __current__
@50 {Метод Ньютона}
@N
@N
@s -1 0 -3 small
@7 Пусть некоторое приближение x{n} к корню X уравнения
F(x)@ =@ 0 уже найдено.@N
@7 Воспользуемся приближенной формулой
@s -1 0 -3 small
@s -1 0 6 small
@s -1 0 -3 small
@10 F(x)@ =@ F(x{n})@ +@ F{x}(x@ -@ x{n}),@N
@s -1 0 -3 small
точность которой возрастает при приближении x к x{n}. Вместо исходного
уравнения F(x)@ =@ 0@ воспользуемся линейным уравнением
@N
@N
@s -1 0 6 small
@s -1 0 -3 small
@s -1 0 -3 small
@40 F(x)@ +@ F{x}(x{n})@ *@ (x@ -x{n})@ =@ 0@10 @N
@N
@s -1 0 -3 small
Решение этого уравнения примем за приближение x{n+1}:
@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 6 small
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@40 x{n+1}@ =@ x{n}@ -@ @[F{x}(x{n})@ @]{-1}@ *@ F(x{n}),@2 n@ =@ 0,1,... (1) @N
@N
@f l y .\images\iter02?.pcc
@7 Метод линеаризации Ньютона допускает простую геометрическую интерпретацию
(см. рисунок).@N
@7 Криволинейный график функции F(x) заменяется касательной к нему в точке
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
(x{n},F(x{n})). За приближение x{n+1} принимается точка пересечения этой
касательной с осью абсцисс.@N
@e -1 0 simple iteration
@7 Формулу (1) можно интерпретировать как метод [простой итерации] с функцией
@s -1 0 6 small
@s -1 0 -3 small
@s -1 0 6 small
f(x)@ =@ x@ -@ @[F{x}@ @]{-1}@ *@ F(x). В точке корня f{x}@ =@ 0, поэтому
@s -1 0 6 small
неравенство ||@ f{x}@ ||@ <@ q@ выполняется для любого положительного
фиксированного значения q в достаточно малой окрестности корня. Следовательно
@s -1 0 0 symbol
@s -1 0 -3 small
@s -1 0 -3 small
асимптотически последовательность погрешностей {e}{n}@ =@ ||x@ -@ x{n}||@N
метода Ньютона убывает быстрее любой последовательности членов, любой
геометрической прогрессии.@N

@t secant
@N
@s 14 0 0 __current__
@55 {Метод секущих}
@N
@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@7 Зададим начальные значения х{0} и х{1}. Последующие значения х{k}
вычисляем по формуле:@N
@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 6 small
@s -1 0 -3 small
@40 x{k+1}@ =@ x{k}@ -@ r{k}@ *@ F(x{k}),@4 k=1,2,...,@4 где
@N
@N
@s -1 0 6 small
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@40 r{k}@ =@ (x{k}@ -@ x{k-1})@ /@ (F(x{k}@ -@ F(x{k-1}))@N
@N
@e -1 0 Newton's
@7 Метод секущих является разностным аналогом метода [Ньютона]. Применяется
@s -1 0 6 small
в тех случаях, когда вычисление производной F{x}(x) является затруднительным.@N
@f l y .\images\iter01?.pcc
@7 Геометрическая интерпретация метода секущих состоит в следующем. Через
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
точки (x{k-1},@ F(x{k-1})),@2 (x{k},@ F(x{k}))@ проводится прямая, абсцисса
@s -1 0 -3 small
точки пересечения этой прямой с осью х и является новым приближением x{k+1}.
@t task
@N
1. Требуется найти оба корня уравнения@N
@7 x@ =@ ln(x@ +@ 2)@N
1.1 Покажите, что для отыскания корня можно воспользоваться итерационным 
процессом@N
@s -1 0 -3 small
@s -1 0 -3 small
@s -1 0 -3 small
x{n+1}@ =@ ln(x{n}@ +@ 2), где x{0}@ >@ 0@ -@ произвольно.@N
@s -1 0 -3 small
1.2 Можно ли указать х{0}, не совпадающее с отрицательным корнем заданного
@s -1 0 -3 small
@s -1 0 -3 small
уравнения, таким образом, чтобы итерационный процесс х{n+1}@ =@ ln(x{n}@ +@ 2)
сходился к отрицательному корню. @N
1.3 Предложите способ вычисления отрицательного корня.@N
@N
2. Выпишите формулы подходящего способа последовательных приближений для нахождения
положительного корня уравнения@N
@s -1 0 -3 small
@7 x@ -@ x{3}@ +@ 0.1@ =@ 0@N
@s -1 0 0 symbol
@s -1 0 -3 small
 Оцените необходимое число итераций для достижения точности {e}@ =@ 10{-8}
и сравните с тем числом, которое Вы получили численно.@N
@N
3. Пусть решается уравнение f(x)@ -g(x)@ =@ 0, где f(x) и g(x) - заданные
@s -1 0 -3 small
функции методом Ньютона. Покажите, что приближение x{n+1} имеет геометрический
смысл абсциссы точки пересечения касательных к графикам y@ =@ f(x) и y@ =@ g(x),
@s -1 0 -3 small
проведенным при x@ =@ x{n}.@N
@N
@s -1 0 -3 small
4. Занумеруем корни x(n), n@ =@ 0,1,... уравнения e{-x}@ =@ cos(x) в порядке
@s -1 0 -3 small
возрастания. Показать, что при решении уравнения e{-x}@ -@ cos(x)@ =@ 0 методом
@s -1 0 -3 small
Ньютона итерации сходятся к корню x(n), если за x{0}(n) принять число
@s -1 0 -3 small
@s -1 0 0 symbol
@7 x{0}(n)@ =@ {p}n/2@N
@N
5. Решите уравнение@N
@7 x@ =@ tg(x)@N
методом Ньютона. Как изменится характер сходимости с увеличением номера корня.
@N
@s -1 0 -3 small
6. Покажите, что для решения методом Ньютона следующих уравнений за x{0}
можно принять любое положительное число:@N
@s -1 0 -3 small
6.1@3 e{x}@ =@ 1/x@N
@s -1 0 -3 small
@s -1 0 -3 small
6.2@3 e{-x}@ +@ x{2}@ -@ 2@ =@ 0@N
@N
7. Отделите корни следующих уравнений, а затем уточните один из них с
помощью итерационного процесса:@N
7.1@3 arctg(x-1)@ +@ 2x@ =@ 0@N
7.2@3 2*tg(x)@ -@ x/2@ +@ 1@ =@ 0@N
@s -1 0 -3 small
7.3@3 ln(x)@ +@ (x@ -@ 1){3}@ =@ 0@N
@s -1 0 -3 small
7.4@3 (x@ +@ 1){1/2}@ =@ 1/x@N
@N
8. Уравнение зависит от времени t. Предложите итерационный алгоритм
отыскания положения этих корней в зависимости от времени t за время
от t@ =@ 0@ до t@ =@ 1. Выясните при каком значении t эволюция отрицательного
корня заканчивается его исчезновением.@N
@s -1 0 -3 small
@s -1 0 -3 small
@7@3 t*x{4}@ +@ x{2}@ -@ 5*x@ +@ 6@ =@ 0@N
@N
@s -1 0 -3 small
9. Решите уравнение различными методами с точностью до 10{-6} и сравните
их по эффективности. Объясните результат.@N
9.1@3 x*ln(x)@ =@ 1@N
@s -1 0 -3 small
@s -1 0 -3 small
9.2@3 cos{5}(x)@ =@ x{2}@N
@s -1 0 -3 small
9.3@3 ln|x|@ +@ (x@ +@ 1){3}@ =@ 0@N
9.4@3 tg(x)@ =@ th(x)@N
9.5@3 3*arctg(1/x)@ -@ 0.5*sh(x)@ =@ 0@N
@8 x@ >@ 0@N
@N
@s -1 0 -3 small
@s -1 0 -3 small
10. Методом Ньютона найдите корень уравнения x{7}@ =@ 0.5@ с точностью до 10{-6}. 
Рассмотрите отдельно критерии сходимости по функции и по аргументу. Сравните
результат и число итераций, требуемое для сходимости.@N
@N




